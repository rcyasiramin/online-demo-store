{"version":3,"file":"src_app_features_account_pages_admin_admin_module_ts.9ef4d5a7baace6bc.js","mappings":"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","names":["i0","AdminComponent","constructor","productsService","authService","dialog","cdr","spinner","alert","this","ngOnInit","getProducts","then","products","productsDataSource","MatTableDataSource","filterPredicate","productFilterPredicate","paginator","productsPaginator","sort","productsSort","ngAfterViewInit","nonAdminUsers","getPlatformUsers","filter","user","role","usersDataSource","detectChanges","userFilterPredicate","usersPaginator","usersSort","data","lowerCaseFilter","toLowerCase","title","includes","category","firstName","email","username","openProductDialog","id","open","ProductDialogComponent","width","afterClosed","subscribe","result","_this","show","updateProduct","error","console","log","createErrorDialog","hide","addNewProduct","markUserAsAdmin","ev","checked","createConfirmDenyDialog","_this2","changeUserToAdmin","source","applyProductsFilter","event","target","value","trim","firstPage","applyUserFilter","core","selectors","MatPaginator","MatSort","ctx","routes","path","component","AdminRoutingModule","RouterModule","AdminModule","SharedModule","AccountModule"],"sourceRoot":"webpack:///","sources":["./src/app/features/account/pages/admin/admin.component.html","./src/app/features/account/pages/admin/admin.component.ts","./src/app/features/account/pages/admin/admin-routing.module.ts","./src/app/features/account/pages/admin/admin.module.ts"],"sourcesContent":["<div class=\"admin-container\">\r\n  <mat-tab-group mat-stretch-tabs=\"true\" mat-align-tabs=\"center\">\r\n    <mat-tab label=\"Products\">\r\n      <div class=\"admin-products-container\">\r\n        <button mat-raised-button color=\"accent\" (click)=\"openProductDialog()\">\r\n          Add new Product\r\n        </button>\r\n\r\n        <mat-form-field>\r\n          <mat-label>Search Product</mat-label>\r\n          <input\r\n            matInput\r\n            (keyup)=\"applyProductsFilter($event)\"\r\n            placeholder=\"Enter the product name or category\"\r\n            #input\r\n          />\r\n        </mat-form-field>\r\n\r\n        <div class=\"table-container mat-elevation-z8\">\r\n          <table\r\n            mat-table\r\n            [dataSource]=\"productsDataSource\"\r\n            matSort\r\n            #productsSort\r\n          >\r\n            <ng-container matColumnDef=\"id\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\r\n              <td mat-cell *matCellDef=\"let product\">{{ product.id }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"title\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n              <td mat-cell *matCellDef=\"let product\">{{ product.title }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"category\">\r\n              <th mat-header-cell *matHeaderCellDef>Category</th>\r\n              <td mat-cell *matCellDef=\"let product\">{{ product.category }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"stock\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Stock</th>\r\n              <td mat-cell *matCellDef=\"let product\">{{ product.stock }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"price\">\r\n              <th mat-header-cell *matHeaderCellDef>Price</th>\r\n              <td mat-cell *matCellDef=\"let product\">\r\n                {{ product.price | currency : \"USD\" : \"symbol\" }}\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"actions\">\r\n              <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n              <td mat-cell *matCellDef=\"let product\">\r\n                <button\r\n                  mat-icon-button\r\n                  color=\"primary\"\r\n                  (click)=\"openProductDialog(product.id)\"\r\n                >\r\n                  <mat-icon>edit</mat-icon>\r\n                </button>\r\n                <button mat-icon-button color=\"warn\">\r\n                  <mat-icon>delete</mat-icon>\r\n                </button>\r\n              </td>\r\n            </ng-container>\r\n\r\n            <tr\r\n              mat-header-row\r\n              *matHeaderRowDef=\"productsDisplayedColumns; sticky: true\"\r\n            ></tr>\r\n            <tr\r\n              mat-row\r\n              *matRowDef=\"let row; columns: productsDisplayedColumns\"\r\n            ></tr>\r\n\r\n            <tr class=\"mat-row\" *matNoDataRow>\r\n              <td\r\n                class=\"mat-cell\"\r\n                [colSpan]=\"productsDisplayedColumns.length\"\r\n                align=\"center\"\r\n              >\r\n                No product found\r\n              </td>\r\n            </tr>\r\n          </table>\r\n\r\n          <mat-paginator\r\n            #productsPaginator\r\n            class=\"mat-paginator-sticky\"\r\n            [pageSizeOptions]=\"[5, 10, 25, 100]\"\r\n          ></mat-paginator>\r\n        </div>\r\n      </div>\r\n    </mat-tab>\r\n\r\n    <mat-tab label=\"Users\">\r\n      <div class=\"admin-users-container\">\r\n        <mat-form-field>\r\n          <mat-label>Search User</mat-label>\r\n          <input\r\n            matInput\r\n            (keyup)=\"applyUserFilter($event)\"\r\n            placeholder=\"Enter the user name, email or username\"\r\n            #input\r\n          />\r\n        </mat-form-field>\r\n\r\n        <div class=\"table-container mat-elevation-z8\">\r\n          <table mat-table [dataSource]=\"usersDataSource\" matSort #usersSort>\r\n            <ng-container matColumnDef=\"id\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\r\n              <td mat-cell *matCellDef=\"let user\">{{ user.id }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"name\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n              <td mat-cell *matCellDef=\"let user\">{{ user.firstName }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"email\">\r\n              <th mat-header-cell *matHeaderCellDef>Email</th>\r\n              <td mat-cell *matCellDef=\"let user\">{{ user.email }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"username\">\r\n              <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n                Username\r\n              </th>\r\n              <td mat-cell *matCellDef=\"let user\">{{ user.username }}</td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"actions\">\r\n              <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n              <td mat-cell *matCellDef=\"let user\">\r\n                <mat-checkbox\r\n                  color=\"primary\"\r\n                  (change)=\"markUserAsAdmin(user, $event)\"\r\n                >\r\n                  Change to Admin\r\n                </mat-checkbox>\r\n              </td>\r\n            </ng-container>\r\n\r\n            <tr\r\n              mat-header-row\r\n              *matHeaderRowDef=\"usersDisplayedColumns; sticky: true\"\r\n            ></tr>\r\n            <tr\r\n              mat-row\r\n              *matRowDef=\"let row; columns: usersDisplayedColumns\"\r\n            ></tr>\r\n\r\n            <tr class=\"mat-row\" *matNoDataRow>\r\n              <td\r\n                class=\"mat-cell\"\r\n                [colSpan]=\"usersDisplayedColumns.length\"\r\n                align=\"center\"\r\n              >\r\n                No user found\r\n              </td>\r\n            </tr>\r\n          </table>\r\n\r\n          <mat-paginator\r\n            #usersPaginator\r\n            class=\"mat-paginator-sticky\"\r\n            [pageSizeOptions]=\"[5, 10, 25, 100]\"\r\n          ></mat-paginator>\r\n        </div>\r\n      </div>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>\r\n","import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  QueryList,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatCheckboxChange } from '@angular/material/checkbox';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport {\r\n  AlertService,\r\n  AuthService,\r\n  ProductsService,\r\n} from 'src/app/core/services';\r\nimport { LoadingSpinnerService } from 'src/app/core/services/spinner/loading-spinner.service';\r\nimport { IProduct, IUser } from 'src/app/shared/models';\r\nimport { ProductDialogComponent } from '../../components/product-dialog/product-dialog.component';\r\n\r\n@Component({\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.scss'],\r\n})\r\nexport class AdminComponent {\r\n  productsDisplayedColumns: string[] = [\r\n    'id',\r\n    'title',\r\n    'category',\r\n    'stock',\r\n    'price',\r\n    'actions',\r\n  ];\r\n  usersDisplayedColumns: string[] = [\r\n    'id',\r\n    'name',\r\n    'email',\r\n    'username',\r\n    'actions',\r\n  ];\r\n  productsDataSource!: MatTableDataSource<IProduct>;\r\n  usersDataSource!: MatTableDataSource<IUser>;\r\n\r\n  // table paginators\r\n  @ViewChild('productsPaginator', { read: MatPaginator })\r\n  productsPaginator!: MatPaginator;\r\n  @ViewChild('usersPaginator', { read: MatPaginator })\r\n  usersPaginator!: MatPaginator;\r\n\r\n  // table sorts\r\n  @ViewChild('productsSort', { read: MatSort }) productsSort!: MatSort;\r\n  @ViewChild('usersSort', { read: MatSort }) usersSort!: MatSort;\r\n\r\n  constructor(\r\n    private productsService: ProductsService,\r\n    private authService: AuthService,\r\n    private dialog: MatDialog,\r\n    private cdr: ChangeDetectorRef,\r\n    private spinner: LoadingSpinnerService,\r\n    private alert: AlertService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.productsService.getProducts().then((products) => {\r\n      this.productsDataSource = new MatTableDataSource(products);\r\n\r\n      this.productsDataSource.filterPredicate = this.productFilterPredicate;\r\n      this.productsDataSource.paginator = this.productsPaginator;\r\n      this.productsDataSource.sort = this.productsSort;\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const nonAdminUsers: IUser[] = this.authService\r\n      .getPlatformUsers()\r\n      .filter((user) => user.role !== 'admin');\r\n    this.usersDataSource = new MatTableDataSource(nonAdminUsers);\r\n    this.cdr.detectChanges();\r\n\r\n    this.usersDataSource.filterPredicate = this.userFilterPredicate;\r\n    this.usersDataSource.paginator = this.usersPaginator;\r\n    this.usersDataSource.sort = this.usersSort;\r\n  }\r\n\r\n  private productFilterPredicate(data: IProduct, filter: string): boolean {\r\n    const lowerCaseFilter = filter.toLowerCase();\r\n    return (\r\n      data.title.toLowerCase().includes(lowerCaseFilter) ||\r\n      data.category.toLowerCase().includes(lowerCaseFilter)\r\n    );\r\n  }\r\n\r\n  private userFilterPredicate(data: IUser, filter: string): boolean {\r\n    const lowerCaseFilter = filter.toLowerCase();\r\n    return (\r\n      data.firstName.toLowerCase().includes(lowerCaseFilter) ||\r\n      data.email.toLowerCase().includes(lowerCaseFilter) ||\r\n      data.username.toLowerCase().includes(lowerCaseFilter)\r\n    );\r\n  }\r\n\r\n  openProductDialog(id?: number) {\r\n    const dialogRef = this.dialog.open(ProductDialogComponent, {\r\n      width: '50%',\r\n      data: id,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(async (result: IProduct) => {\r\n      if (result) {\r\n        if (id) {\r\n          try {\r\n            this.spinner.show();\r\n            const products = await this.productsService.updateProduct(result);\r\n            this.productsDataSource.data = products;\r\n            this.cdr.detectChanges();\r\n          } catch (error) {\r\n            console.log(error);\r\n            this.alert.createErrorDialog('Failed to update product', '');\r\n          } finally {\r\n            this.spinner.hide();\r\n          }\r\n        } else {\r\n          try {\r\n            this.spinner.show();\r\n            const products = await this.productsService.addNewProduct(result);\r\n            this.productsDataSource.data = products;\r\n            this.cdr.detectChanges();\r\n          } catch (error) {\r\n            console.log(error);\r\n            this.alert.createErrorDialog('Failed to add a product', '');\r\n          } finally {\r\n            this.spinner.hide();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  markUserAsAdmin(user: IUser, ev: MatCheckboxChange) {\r\n    const checked = ev.checked;\r\n    if (checked) {\r\n      this.alert.createConfirmDenyDialog(\r\n        'Change to Admin',\r\n        `Do you want to turn ${user.firstName} to an administrator?`,\r\n        async () => {\r\n          this.usersDataSource.data = this.authService.changeUserToAdmin(user);\r\n          this.cdr.detectChanges();\r\n        },\r\n        () => {\r\n          ev.source.checked = false;\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  applyProductsFilter(event: KeyboardEvent) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.productsDataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.productsDataSource.paginator) {\r\n      this.productsDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  applyUserFilter(event: KeyboardEvent) {\r\n    const filterValue = (event.target as HTMLInputElement).value;\r\n    this.usersDataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.usersDataSource.paginator) {\r\n      this.usersDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AdminComponent } from './admin.component';\r\n\r\nconst routes: Routes = [{ path: '', component: AdminComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\nimport { AdminComponent } from './admin.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { AccountModule } from '../../account.module';\r\n\r\n@NgModule({\r\n  declarations: [AdminComponent],\r\n  imports: [SharedModule, AdminRoutingModule, AccountModule],\r\n})\r\nexport class AdminModule {}\r\n"],"x_google_ignoreList":[]}