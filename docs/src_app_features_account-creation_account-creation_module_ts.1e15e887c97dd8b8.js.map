{"version":3,"file":"src_app_features_account-creation_account-creation_module_ts.1e15e887c97dd8b8.js","mappings":"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","names":["i0","AccountCreationComponent","constructor","fb","authService","utils","router","alert","spinner","this","ngOnInit","stateOpts","Object","keys","States","map","st","uf","name","newAccountForm","group","Validators","lastName","email","phone","address","zipCode","street","complement","neighborhood","city","state","password","confirmPassword","privacyPolicy","dataSharing","getAddressFromZipCode","trim","_this","controls","get","setErrors","required","replace","getDataFromZipCode","fillAddress","invalidZipCode","agreementAccepted","formValue","getRawValue","addressGroupControl","setValue","cidade","estado","bairro","logradouro","getNewUser","formValues","username","split","addressValue","id","USERS","firstName","maidenName","addresses","postalCode","createAccount","_this2","show","newUser","u","createErrorDialog","hide","differentPassword","valid","createNewAccount","createSuccessDialogWithAction","navigate","core","selectors","ctx","value","routes","path","component","AccountCreationRoutingModule","RouterModule","AccountCreationModule","provideNgxMask","imports","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/features/account-creation/account-creation.component.html","./src/app/features/account-creation/account-creation.component.ts","./src/app/features/account-creation/account-creation-routing.module.ts","./src/app/features/account-creation/account-creation.module.ts"],"sourcesContent":["<form\r\n  [formGroup]=\"newAccountForm\"\r\n  class=\"creation-form\"\r\n  role=\"form\"\r\n  (ngSubmit)=\"createAccount()\"\r\n>\r\n  <div class=\"login-container\">\r\n    <div class=\"logo\" routerLink=\"/\" title=\"Back to Store\">\r\n      <img\r\n        loading=\"lazy\"\r\n        src=\"assets/images/shopping-cart-logo.png\"\r\n        width=\"60\"\r\n        height=\"60\"\r\n      />\r\n      <span>BC Store</span>\r\n    </div>\r\n\r\n    <div class=\"fields\">\r\n      <div class=\"row\">\r\n        <mat-form-field id=\"name-field\">\r\n          <mat-label>Name</mat-label>\r\n          <input\r\n            type=\"text\"\r\n            matInput\r\n            formControlName=\"name\"\r\n            placeholder=\"Enter your name\"\r\n          />\r\n          <mat-error *ngIf=\"newAccountForm.get('name')!.hasError('required')\">\r\n            Name is <strong>required</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field id=\"lastname-field\">\r\n          <mat-label>Last Name</mat-label>\r\n          <input\r\n            type=\"text\"\r\n            matInput\r\n            formControlName=\"lastName\"\r\n            placeholder=\"Enter your last name\"\r\n          />\r\n          <mat-error\r\n            *ngIf=\"newAccountForm.get('lastName')!.hasError('required')\"\r\n          >\r\n            Last name is <strong>required</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <mat-form-field id=\"phone-field\">\r\n        <mat-label>Phone</mat-label>\r\n        <span matTextPrefix>+55</span>\r\n        <input\r\n          type=\"tel\"\r\n          matInput\r\n          formControlName=\"phone\"\r\n          placeholder=\"Enter your phone\"\r\n          mask=\"(00) 00000-0000||(00) 0000-0000\"\r\n        />\r\n        <mat-error *ngIf=\"newAccountForm.get('phone')!.hasError('required')\">\r\n          Phone is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field id=\"email-field\">\r\n        <mat-label>Email</mat-label>\r\n        <input\r\n          type=\"email\"\r\n          matInput\r\n          formControlName=\"email\"\r\n          placeholder=\"Enter your email\"\r\n        />\r\n        <mat-error\r\n          *ngIf=\"\r\n            newAccountForm.get('email')!.hasError('email') &&\r\n            !newAccountForm.get('email')!.hasError('required')\r\n          \"\r\n        >\r\n          Please enter a valid email address\r\n        </mat-error>\r\n        <mat-error *ngIf=\"newAccountForm.get('email')!.hasError('required')\">\r\n          Email is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <div class=\"address\" formGroupName=\"address\">\r\n        <h2>Adress</h2>\r\n\r\n        <div class=\"row\">\r\n          <mat-form-field id=\"zipCode-field\">\r\n            <mat-label>ZIP Code</mat-label>\r\n            <input\r\n              type=\"text\"\r\n              matInput\r\n              formControlName=\"zipCode\"\r\n              placeholder=\"Enter your ZIP Code\"\r\n              mask=\"00000-000\"\r\n            />\r\n            <button\r\n              matSuffix\r\n              mat-icon-button\r\n              type=\"button\"\r\n              (click)=\"\r\n                getAddressFromZipCode(\r\n                  newAccountForm.get('address')!.get('zipCode')!.value\r\n                )\r\n              \"\r\n            >\r\n              <mat-icon> search </mat-icon>\r\n            </button>\r\n            <mat-error\r\n              *ngIf=\"\r\n                newAccountForm\r\n                  .get('address')!\r\n                  .get('zipCode')!\r\n                  .hasError('required')\r\n              \"\r\n            >\r\n              ZIP Code is <strong>required</strong>\r\n            </mat-error>\r\n            <mat-error\r\n              *ngIf=\"\r\n                newAccountForm\r\n                  .get('address')!\r\n                  .get('zipCode')!\r\n                  .hasError('invalidZipCode')\r\n              \"\r\n            >\r\n              Please enter a valid ZIP Code\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field id=\"state-field\">\r\n            <mat-label>State</mat-label>\r\n            <mat-select formControlName=\"state\">\r\n              <mat-option *ngFor=\"let opt of stateOpts\" [value]=\"opt.uf\">\r\n                {{ opt.name }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error\r\n              *ngIf=\"\r\n                newAccountForm\r\n                  .get('address')!\r\n                  .get('state')!\r\n                  .hasError('required')\r\n              \"\r\n            >\r\n              State is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <mat-form-field id=\"street-field\">\r\n            <mat-label>Street</mat-label>\r\n            <input\r\n              type=\"text\"\r\n              matInput\r\n              formControlName=\"street\"\r\n              placeholder=\"Enter your street\"\r\n            />\r\n            <mat-error\r\n              *ngIf=\"\r\n                newAccountForm\r\n                  .get('address')!\r\n                  .get('street')!\r\n                  .hasError('required')\r\n              \"\r\n            >\r\n              Street is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field id=\"complement-field\">\r\n            <mat-label>Complement</mat-label>\r\n            <input\r\n              type=\"text\"\r\n              matInput\r\n              formControlName=\"complement\"\r\n              placeholder=\"Enter your complement\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div class=\"row\">\r\n          <mat-form-field id=\"city-field\">\r\n            <mat-label>City</mat-label>\r\n            <input\r\n              type=\"text\"\r\n              matInput\r\n              formControlName=\"city\"\r\n              placeholder=\"Enter your city\"\r\n            />\r\n            <mat-error\r\n              *ngIf=\"\r\n                newAccountForm.get('address')!.get('city')!.hasError('required')\r\n              \"\r\n            >\r\n              City name is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n\r\n          <mat-form-field id=\"neighborhood-field\">\r\n            <mat-label>Neighborhood</mat-label>\r\n            <input\r\n              type=\"text\"\r\n              matInput\r\n              formControlName=\"neighborhood\"\r\n              placeholder=\"Enter your neighborhood\"\r\n            />\r\n            <mat-error\r\n              *ngIf=\"\r\n                newAccountForm\r\n                  .get('address')!\r\n                  .get('neighborhood')!\r\n                  .hasError('required')\r\n              \"\r\n            >\r\n              Neighborhood is <strong>required</strong>\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <mat-form-field id=\"password-field\">\r\n          <mat-label>Password</mat-label>\r\n          <input\r\n            [type]=\"!showPassword[0] ? 'password' : 'text'\"\r\n            matInput\r\n            formControlName=\"password\"\r\n            placeholder=\"Enter your password\"\r\n          />\r\n          <button\r\n            matSuffix\r\n            mat-icon-button\r\n            type=\"button\"\r\n            (click)=\"showPassword[0] = !showPassword[0]\"\r\n          >\r\n            <mat-icon>\r\n              {{ !showPassword[0] ? \"visibility\" : \"visibility_off\" }}\r\n            </mat-icon>\r\n          </button>\r\n          <mat-error\r\n            *ngIf=\"newAccountForm.get('password')!.hasError('required')\"\r\n          >\r\n            Password is <strong>required</strong>\r\n          </mat-error>\r\n          <mat-error\r\n            *ngIf=\"\r\n              newAccountForm.get('password')!.hasError('incorrectPassword')\r\n            \"\r\n          >\r\n            Password is <strong>incorrect</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field id=\"confirm-password-field\">\r\n          <mat-label>Confirm Password</mat-label>\r\n          <input\r\n            [type]=\"!showPassword[1] ? 'password' : 'text'\"\r\n            matInput\r\n            formControlName=\"confirmPassword\"\r\n            placeholder=\"Confirm your password\"\r\n          />\r\n          <button\r\n            matSuffix\r\n            mat-icon-button\r\n            type=\"button\"\r\n            (click)=\"showPassword[1] = !showPassword[1]\"\r\n          >\r\n            <mat-icon>\r\n              {{ !showPassword[1] ? \"visibility\" : \"visibility_off\" }}\r\n            </mat-icon>\r\n          </button>\r\n          <mat-error\r\n            *ngIf=\"newAccountForm.get('confirmPassword')!.hasError('required')\"\r\n          >\r\n            Password is <strong>required</strong>\r\n          </mat-error>\r\n          <mat-error\r\n            *ngIf=\"\r\n              newAccountForm\r\n                .get('confirmPassword')!\r\n                .hasError('differentPassword')\r\n            \"\r\n          >\r\n            Passwords are <strong>differents</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"agreements\">\r\n        <mat-checkbox formControlName=\"privacyPolicy\" color=\"primary\">\r\n          Privacy Policy Agreement - <a>Click here</a>\r\n        </mat-checkbox>\r\n        <mat-checkbox formControlName=\"dataSharing\" color=\"primary\">\r\n          I agree with the data sharing policy -\r\n          <a\r\n            href=\"https://www.planalto.gov.br/ccivil_03/_ato2015-2018/2018/lei/l13709.htm\"\r\n            target=\"_blank\"\r\n          >\r\n            LGPD document\r\n          </a>\r\n        </mat-checkbox>\r\n      </div>\r\n    </div>\r\n\r\n    <button\r\n      mat-flat-button\r\n      color=\"primary\"\r\n      id=\"submit-btn\"\r\n      type=\"submit\"\r\n      [disabled]=\"newAccountForm.invalid || !agreementAccepted()\"\r\n    >\r\n      Create Account\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { Component } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { AuthService, AlertService, UtilsService } from 'src/app/core/services';\r\nimport { LoadingSpinnerService } from 'src/app/core/services/spinner/loading-spinner.service';\r\nimport { USERS } from 'src/app/shared/constants';\r\nimport { States } from 'src/app/shared/constants/states.constants';\r\nimport { IPostmonApiResponse, IState, IUser } from 'src/app/shared/models';\r\n\r\n@Component({\r\n  templateUrl: './account-creation.component.html',\r\n  styleUrls: ['./account-creation.component.scss'],\r\n})\r\nexport class AccountCreationComponent {\r\n  newAccountForm!: FormGroup;\r\n  showPassword: boolean[] = [false, false];\r\n  stateOpts: IState[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private utils: UtilsService,\r\n    private router: Router,\r\n    private alert: AlertService,\r\n    private spinner: LoadingSpinnerService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.stateOpts = Object.keys(States).map((st) => ({\r\n      uf: st,\r\n      name: States[st].name,\r\n    }));\r\n\r\n    this.newAccountForm = this.fb.group({\r\n      name: ['', [Validators.required]],\r\n      lastName: ['', [Validators.required]],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      phone: ['', [Validators.required]],\r\n      address: this.fb.group({\r\n        zipCode: ['', [Validators.required]],\r\n        street: ['', [Validators.required]],\r\n        complement: [''],\r\n        neighborhood: ['', [Validators.required]],\r\n        city: ['', [Validators.required]],\r\n        state: ['', [Validators.required]],\r\n      }),\r\n      password: ['', [Validators.required]],\r\n      confirmPassword: ['', [Validators.required]],\r\n      privacyPolicy: [false, [Validators.required]],\r\n      dataSharing: [false, [Validators.required]],\r\n    });\r\n  }\r\n\r\n  async getAddressFromZipCode(zipCode: string) {\r\n    if (zipCode.trim() === '') {\r\n      this.newAccountForm.controls['address'].get('zipCode')?.setErrors({\r\n        required: true,\r\n      });\r\n    }\r\n\r\n    try {\r\n      zipCode = zipCode.replace('-', '').trim();\r\n      const address: IPostmonApiResponse = await this.utils.getDataFromZipCode(\r\n        zipCode\r\n      );\r\n      this.fillAddress(address);\r\n    } catch (err) {\r\n      this.newAccountForm.controls['address'].get('zipCode')?.setErrors({\r\n        invalidZipCode: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  agreementAccepted() {\r\n    const formValue = this.newAccountForm.getRawValue();\r\n    const privacyPolicy: boolean = formValue['privacyPolicy'];\r\n    const dataSharing: boolean = formValue['dataSharing'];\r\n\r\n    return privacyPolicy && dataSharing;\r\n  }\r\n\r\n  private fillAddress(address: IPostmonApiResponse) {\r\n    const addressGroupControl = this.newAccountForm.controls['address'];\r\n\r\n    addressGroupControl.get('city')?.setValue(address.cidade);\r\n    addressGroupControl.get('state')?.setValue(address.estado);\r\n    addressGroupControl.get('neighborhood')?.setValue(address.bairro);\r\n    addressGroupControl.get('street')?.setValue(address.logradouro);\r\n  }\r\n\r\n  private getNewUser(): IUser {\r\n    const formValues = this.newAccountForm.getRawValue();\r\n    const email = formValues['email'];\r\n    const username = email.split('@')[0];\r\n    const password = formValues['password'];\r\n    const name = formValues['name'];\r\n    const lastName = formValues['lastName'];\r\n    const phone = formValues['phone'];\r\n\r\n    const addressValue = this.newAccountForm.controls['address'].getRawValue();\r\n    const zipCode = addressValue['zipCode'];\r\n    const street = addressValue['street'];\r\n    const complement = addressValue['complement'];\r\n    const neighborhood = addressValue['neighborhood'];\r\n    const city = addressValue['city'];\r\n    const state = addressValue['state'];\r\n\r\n    return {\r\n      id: USERS.length + 1,\r\n      email,\r\n      firstName: name,\r\n      maidenName: '',\r\n      lastName,\r\n      password,\r\n      username,\r\n      addresses: [\r\n        {\r\n          city,\r\n          postalCode: zipCode,\r\n          state,\r\n          address: `${street} - ${complement} - ${neighborhood}`,\r\n        },\r\n      ],\r\n      phone,\r\n    };\r\n  }\r\n\r\n  async createAccount() {\r\n    this.spinner.show();\r\n\r\n    const newUser: IUser = this.getNewUser();\r\n\r\n    const user = USERS.find(\r\n      (u) => u.email === newUser.email || u.username === newUser.username\r\n    );\r\n\r\n    if (user) {\r\n      this.alert.createErrorDialog(\r\n        'Account already exists',\r\n        'An account with this email already exists'\r\n      );\r\n      this.spinner.hide();\r\n      return;\r\n    }\r\n\r\n    const confirmPassword =\r\n      this.newAccountForm.getRawValue()['confirmPassword'];\r\n\r\n    if (newUser.password !== confirmPassword) {\r\n      this.newAccountForm.controls['confirmPassword'].setErrors({\r\n        differentPassword: true,\r\n      });\r\n      this.spinner.hide();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (this.newAccountForm.valid) {\r\n        await this.authService.createNewAccount(newUser);\r\n        this.alert.createSuccessDialogWithAction(\r\n          'Account created!',\r\n          'Your account was created successfully',\r\n          () => {\r\n            this.router.navigate(['/login']);\r\n          }\r\n        );\r\n      }\r\n    } catch (err) {\r\n      this.alert.createErrorDialog('Error!', 'Something went wrong');\r\n    } finally {\r\n      this.spinner.hide();\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AccountCreationComponent } from './account-creation.component';\r\n\r\nconst routes: Routes = [{ path: '', component: AccountCreationComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountCreationRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AccountCreationRoutingModule } from './account-creation-routing.module';\r\nimport { AccountCreationComponent } from './account-creation.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { NgxMaskDirective, NgxMaskPipe, provideNgxMask } from 'ngx-mask';\r\n\r\n@NgModule({\r\n  declarations: [AccountCreationComponent],\r\n  imports: [\r\n    SharedModule,\r\n    AccountCreationRoutingModule,\r\n    NgxMaskDirective,\r\n    NgxMaskPipe,\r\n  ],\r\n  providers: [provideNgxMask()],\r\n})\r\nexport class AccountCreationModule {}\r\n"],"x_google_ignoreList":[]}