{"version":3,"file":"src_app_features_account_account_module_ts.8f8ed4e8e25237c4.js","mappings":"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","names":["AccountComponent","constructor","cartService","router","this","ngOnInit","setAtCart","url","core","selectors","i0","routes","path","component","children","pathMatch","redirectTo","loadChildren","Promise","then","m","AdminModule","title","canActivate","AuthGuard","UserAreaModule","AccountRoutingModule","RouterModule","AccountModule","SharedModule","AddressDialogComponent","utils","fb","dialogRef","addressData","stateOpts","Object","keys","States","map","st","uf","name","addressForm","group","zipCode","Validators","street","complement","neighborhood","city","state","getAddressFromZipCode","trim","_this","get","setErrors","required","replace","address","getDataFromZipCode","fillAddress","invalidZipCode","addressGroupControl","controls","setValue","cidade","estado","bairro","logradouro","apply","close","getRawValue","_angular_core__WEBPACK_IMPORTED_MODULE_2__","MAT_DIALOG_DATA","ctx","value","AddressTileComponent","dialog","EventEmitter","formValue","openAddressDialog","open","width","data","afterClosed","subscribe","result","onEditAddress","emit","postalCode","_angular_core__WEBPACK_IMPORTED_MODULE_1__","ProductDialogComponent","productsService","id","getCategories","categories","category","captalizeFirstLetter","productForm","brand","description","price","stock","images","initProductForm","product","getProductById","toString","formControls","convertFormValueToProduct","_this2","getProducts","length","discountPercentage","rating","thumbnail","_this3"],"sourceRoot":"webpack:///","sources":["./src/app/features/account/account.component.ts","./src/app/features/account/account.component.html","./src/app/features/account/account-routing.module.ts","./src/app/features/account/account.module.ts","./src/app/features/account/components/address-dialog/address-dialog.component.html","./src/app/features/account/components/address-dialog/address-dialog.component.ts","./src/app/features/account/components/address-tile/address-tile.component.ts","./src/app/features/account/components/address-tile/address-tile.component.html","./src/app/features/account/components/product-dialog/product-dialog.component.html","./src/app/features/account/components/product-dialog/product-dialog.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { CartService } from 'src/app/core/services';\r\n\r\n@Component({\r\n  templateUrl: './account.component.html',\r\n  styleUrls: ['./account.component.scss'],\r\n})\r\nexport class AccountComponent {\r\n  constructor(private cartService: CartService, private router: Router) {}\r\n\r\n  ngOnInit() {\r\n    this.cartService.setAtCart(this.router.url);\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthGuard } from 'src/app/core/guards/auth/auth.guard';\r\nimport { AccountComponent } from './account.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AccountComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        pathMatch: 'full',\r\n        redirectTo: 'user',\r\n      },\r\n      {\r\n        path: 'admin',\r\n        loadChildren: () =>\r\n          import('./pages/admin/admin.module').then((m) => m.AdminModule),\r\n        title: 'Admin View | BC Store',\r\n        canActivate: [AuthGuard],\r\n      },\r\n      {\r\n        path: 'user',\r\n        loadChildren: () =>\r\n          import('./pages/user-area/user-area.module').then(\r\n            (m) => m.UserAreaModule\r\n          ),\r\n        title: 'User Area | BC Store',\r\n        canActivate: [AuthGuard],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AccountRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { AccountComponent } from './account.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport * as components from './components';\r\nimport { NgxMaskDirective, NgxMaskPipe } from 'ngx-mask';\r\n\r\n@NgModule({\r\n  declarations: [AccountComponent, ...components.accountComponents],\r\n  imports: [SharedModule, AccountRoutingModule, NgxMaskDirective, NgxMaskPipe],\r\n  exports: [...components.accountComponents, NgxMaskDirective, NgxMaskPipe],\r\n})\r\nexport class AccountModule {}\r\n","<h1 mat-dialog-title>\r\n  {{ addressData !== null ? \"Edit Address\" : \"New Address\" }}\r\n</h1>\r\n<div mat-dialog-content>\r\n  <form [formGroup]=\"addressForm\" role=\"form\">\r\n    <div class=\"row\">\r\n      <mat-form-field id=\"zipCode-field\">\r\n        <mat-label>ZIP Code</mat-label>\r\n        <input\r\n          cdkFocusInitial\r\n          type=\"text\"\r\n          matInput\r\n          formControlName=\"zipCode\"\r\n          placeholder=\"Enter your ZIP Code\"\r\n          mask=\"00000-000\"\r\n        />\r\n        <button\r\n          matSuffix\r\n          mat-icon-button\r\n          type=\"button\"\r\n          (click)=\"getAddressFromZipCode(addressForm.get('zipCode')!.value)\"\r\n        >\r\n          <mat-icon> search </mat-icon>\r\n        </button>\r\n        <mat-error *ngIf=\"addressForm.get('zipCode')!.hasError('required')\">\r\n          ZIP Code is <strong>required</strong>\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"addressForm.get('zipCode')!.hasError('invalidZipCode')\"\r\n        >\r\n          Please enter a valid ZIP Code\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field id=\"state-field\">\r\n        <mat-label>State</mat-label>\r\n        <mat-select formControlName=\"state\">\r\n          <mat-option *ngFor=\"let opt of stateOpts\" [value]=\"opt.uf\">\r\n            {{ opt.name }}\r\n          </mat-option>\r\n        </mat-select>\r\n        <mat-error *ngIf=\"addressForm.get('state')!.hasError('required')\">\r\n          State is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <mat-form-field id=\"street-field\">\r\n        <mat-label>Street</mat-label>\r\n        <input\r\n          type=\"text\"\r\n          matInput\r\n          formControlName=\"street\"\r\n          placeholder=\"Enter your street\"\r\n        />\r\n        <mat-error *ngIf=\"addressForm.get('street')!.hasError('required')\">\r\n          Street is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field id=\"complement-field\">\r\n        <mat-label>Complement</mat-label>\r\n        <input\r\n          type=\"text\"\r\n          matInput\r\n          formControlName=\"complement\"\r\n          placeholder=\"Enter your complement\"\r\n        />\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <mat-form-field id=\"city-field\">\r\n        <mat-label>City</mat-label>\r\n        <input\r\n          type=\"text\"\r\n          matInput\r\n          formControlName=\"city\"\r\n          placeholder=\"Enter your city\"\r\n        />\r\n        <mat-error *ngIf=\"addressForm.get('city')!.hasError('required')\">\r\n          City name is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field id=\"neighborhood-field\">\r\n        <mat-label>Neighborhood</mat-label>\r\n        <input\r\n          type=\"text\"\r\n          matInput\r\n          formControlName=\"neighborhood\"\r\n          placeholder=\"Enter your neighborhood\"\r\n        />\r\n        <mat-error\r\n          *ngIf=\"addressForm.get('neighborhood')!.hasError('required')\"\r\n        >\r\n          Neighborhood is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n  </form>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\r\n  <button\r\n    mat-stroked-button\r\n    color=\"primary\"\r\n    (click)=\"apply()\"\r\n    [disabled]=\"addressForm.invalid || !addressForm.dirty\"\r\n  >\r\n    {{ addressData !== null ? \"Edit\" : \"Add\" }}\r\n  </button>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { UtilsService } from 'src/app/core/services';\r\nimport { States } from 'src/app/shared/constants';\r\nimport { IPostmonApiResponse, IState } from 'src/app/shared/models';\r\n\r\n@Component({\r\n  templateUrl: './address-dialog.component.html',\r\n  styleUrls: ['./address-dialog.component.scss'],\r\n})\r\nexport class AddressDialogComponent {\r\n  addressForm!: FormGroup;\r\n  stateOpts: IState[] = [];\r\n\r\n  constructor(\r\n    private utils: UtilsService,\r\n    private fb: FormBuilder,\r\n    public dialogRef: MatDialogRef<AddressDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public addressData?: FormGroup\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.stateOpts = Object.keys(States).map((st) => ({\r\n      uf: st,\r\n      name: States[st].name,\r\n    }));\r\n\r\n    this.addressForm =\r\n      this.addressData ??\r\n      this.fb.group({\r\n        zipCode: ['', [Validators.required]],\r\n        street: ['', [Validators.required]],\r\n        complement: [''],\r\n        neighborhood: ['', [Validators.required]],\r\n        city: ['', [Validators.required]],\r\n        state: ['', [Validators.required]],\r\n      });\r\n  }\r\n\r\n  async getAddressFromZipCode(zipCode: string) {\r\n    if (zipCode.trim() === '') {\r\n      this.addressForm.get('zipCode')?.setErrors({\r\n        required: true,\r\n      });\r\n    }\r\n\r\n    try {\r\n      zipCode = zipCode.replace('-', '').trim();\r\n      const address: IPostmonApiResponse = await this.utils.getDataFromZipCode(\r\n        zipCode\r\n      );\r\n      this.fillAddress(address);\r\n    } catch (err) {\r\n      this.addressForm.get('zipCode')?.setErrors({\r\n        invalidZipCode: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  private fillAddress(address: IPostmonApiResponse) {\r\n    const addressGroupControl = this.addressForm.controls;\r\n\r\n    addressGroupControl['city']?.setValue(address.cidade);\r\n    addressGroupControl['state']?.setValue(address.estado);\r\n    addressGroupControl['neighborhood']?.setValue(address.bairro);\r\n    addressGroupControl['street']?.setValue(address.logradouro);\r\n  }\r\n\r\n  apply() {\r\n    this.dialogRef.close(this.addressForm.getRawValue());\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { IUserAddress } from 'src/app/shared/models';\r\nimport { AddressDialogComponent } from '../address-dialog/address-dialog.component';\r\n\r\n@Component({\r\n  selector: 'address-tile',\r\n  templateUrl: './address-tile.component.html',\r\n  styleUrls: ['./address-tile.component.scss'],\r\n})\r\nexport class AddressTileComponent {\r\n  @Input() addressData!: FormGroup;\r\n  @Output() onEditAddress: EventEmitter<IUserAddress> =\r\n    new EventEmitter<IUserAddress>();\r\n\r\n  address: string = '';\r\n  city: string = '';\r\n  zipCode: string = '';\r\n  state: string = '';\r\n\r\n  constructor(private dialog: MatDialog) {}\r\n\r\n  ngOnInit() {\r\n    const formValue = this.addressData.getRawValue();\r\n    this.address = `${formValue['street']}${\r\n      formValue['complement'].trim() !== ''\r\n        ? `, ${formValue['complement'].trim()}`\r\n        : ''\r\n    } - ${formValue['neighborhood']}`;\r\n    this.city = formValue['city'];\r\n    this.zipCode = formValue['zipCode'];\r\n    this.state = formValue['state'];\r\n  }\r\n\r\n  openAddressDialog() {\r\n    const dialogRef = this.dialog.open(AddressDialogComponent, {\r\n      width: '50%',\r\n      data: this.addressData,\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        const editedAddress: IUserAddress = {\r\n          city: result.city,\r\n          postalCode: result.zipCode,\r\n          state: result.state,\r\n          address: `${result.street} - ${result.complement} - ${result.neighborhood}`,\r\n        };\r\n\r\n        this.onEditAddress.emit(editedAddress);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"address-tile-container\">\r\n  <div class=\"address-data\">\r\n    <span> {{ address }} </span>\r\n    <span> CEP {{ zipCode }} </span>\r\n    <span> {{ city }}, {{ state }} </span>\r\n  </div>\r\n  <div class=\"actions\">\r\n    <button mat-icon-button color=\"primary\" (click)=\"openAddressDialog()\">\r\n      <mat-icon>edit</mat-icon>\r\n    </button>\r\n    <button mat-icon-button color=\"warn\">\r\n      <mat-icon>delete</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","<h1 mat-dialog-title>\r\n  {{ id ? \"Edit Product\" : \"New Product\" }}\r\n</h1>\r\n<div mat-dialog-content>\r\n  <form [formGroup]=\"productForm\" role=\"form\">\r\n    <mat-form-field id=\"title-field\">\r\n      <mat-label>Title</mat-label>\r\n      <input\r\n        cdkFocusInitial\r\n        type=\"text\"\r\n        matInput\r\n        formControlName=\"title\"\r\n        placeholder=\"Enter the product title\"\r\n      />\r\n      <mat-error *ngIf=\"productForm.get('title')!.hasError('required')\">\r\n        Title is <strong>required</strong>\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <div class=\"row\">\r\n      <mat-form-field id=\"category-field\">\r\n        <mat-label>Category</mat-label>\r\n        <mat-select formControlName=\"category\">\r\n          <mat-option\r\n            *ngFor=\"let category of categories\"\r\n            [value]=\"category | lowercase\"\r\n          >\r\n            {{ category }}\r\n          </mat-option>\r\n        </mat-select>\r\n        <mat-error *ngIf=\"productForm.get('category')!.hasError('required')\">\r\n          Category is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field id=\"brand-field\">\r\n        <mat-label>Brand</mat-label>\r\n        <input\r\n          cdkFocusInitial\r\n          type=\"text\"\r\n          matInput\r\n          formControlName=\"brand\"\r\n          placeholder=\"Enter the product brand\"\r\n        />\r\n        <mat-error *ngIf=\"productForm.get('brand')!.hasError('required')\">\r\n          Brand is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <mat-form-field id=\"stock-field\">\r\n        <mat-label>Stock</mat-label>\r\n        <input\r\n          type=\"number\"\r\n          matInput\r\n          formControlName=\"stock\"\r\n          min=\"0\"\r\n          placeholder=\"Enter the product stock\"\r\n        />\r\n        <mat-error *ngIf=\"productForm.get('stock')!.hasError('required')\">\r\n          Stock is <strong>required</strong>\r\n        </mat-error>\r\n        <mat-error *ngIf=\"productForm.get('stock')!.hasError('min')\">\r\n          Stock can't be negative\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field id=\"price-field\">\r\n        <mat-label>Price</mat-label>\r\n        <input\r\n          type=\"number\"\r\n          matInput\r\n          formControlName=\"price\"\r\n          min=\"0\"\r\n          placeholder=\"Enter the product price\"\r\n        />\r\n        <span matTextPrefix>$&nbsp;</span>\r\n        <span matTextSuffix>.00</span>\r\n        <mat-error *ngIf=\"productForm.get('price')!.hasError('required')\">\r\n          Price is <strong>required</strong>\r\n        </mat-error>\r\n        <mat-error *ngIf=\"productForm.get('price')!.hasError('min')\">\r\n          Price can't be negative\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <mat-form-field id=\"description-field\">\r\n      <mat-label>Description</mat-label>\r\n      <textarea\r\n        type=\"text\"\r\n        matInput\r\n        formControlName=\"description\"\r\n        placeholder=\"Enter the product description\"\r\n        maxlength=\"250\"\r\n      ></textarea>\r\n      <mat-error *ngIf=\"productForm.get('description')!.hasError('required')\">\r\n        Description is <strong>required</strong>\r\n      </mat-error>\r\n    </mat-form-field>\r\n  </form>\r\n</div>\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-stroked-button mat-dialog-close>Cancel</button>\r\n  <button\r\n    mat-stroked-button\r\n    color=\"primary\"\r\n    (click)=\"apply()\"\r\n    [disabled]=\"productForm.invalid || !productForm.dirty\"\r\n  >\r\n    {{ id ? \"Edit\" : \"Add\" }}\r\n  </button>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ProductsService, UtilsService } from 'src/app/core/services';\r\nimport { IProduct } from 'src/app/shared/models';\r\n\r\n@Component({\r\n  templateUrl: './product-dialog.component.html',\r\n  styleUrls: ['./product-dialog.component.scss'],\r\n})\r\nexport class ProductDialogComponent {\r\n  productForm!: FormGroup;\r\n  categories: string[] = [];\r\n  product?: IProduct;\r\n\r\n  constructor(\r\n    private utils: UtilsService,\r\n    private productsService: ProductsService,\r\n    private fb: FormBuilder,\r\n    public dialogRef: MatDialogRef<ProductDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public id?: number\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.productsService\r\n      .getCategories()\r\n      .then(\r\n        (categories) =>\r\n          (this.categories = categories.map((category) =>\r\n            this.utils.captalizeFirstLetter(category)\r\n          ))\r\n      );\r\n\r\n    this.productForm = this.fb.group({\r\n      title: ['', [Validators.required]],\r\n      brand: ['', [Validators.required]],\r\n      category: ['', [Validators.required]],\r\n      description: ['', [Validators.required, Validators.maxLength(250)]],\r\n      price: [0, [Validators.required, Validators.min(0)]],\r\n      stock: [0, [Validators.required, Validators.min(0)]],\r\n      images: [[]],\r\n    });\r\n    this.initProductForm();\r\n  }\r\n\r\n  private async initProductForm(): Promise<any> {\r\n    if (this.id) {\r\n      this.product = await this.productsService.getProductById(\r\n        this.id.toString()\r\n      );\r\n\r\n      const formControls = this.productForm.controls;\r\n      formControls['title'].setValue(this.product.title);\r\n      formControls['brand'].setValue(this.product.brand);\r\n      formControls['category'].setValue(this.product.category);\r\n      formControls['description'].setValue(this.product.description);\r\n      formControls['price'].setValue(this.product.price);\r\n      formControls['stock'].setValue(this.product.stock);\r\n      formControls['images'].setValue(this.product.images);\r\n    }\r\n  }\r\n\r\n  private async convertFormValueToProduct(formValue: any): Promise<IProduct> {\r\n    if (this.product) {\r\n      return {\r\n        ...this.product!,\r\n        title: formValue['title'],\r\n        brand: formValue['brand'],\r\n        category: formValue['category'],\r\n        stock: formValue['stock'],\r\n        price: formValue['price'],\r\n        description: formValue['description'],\r\n      };\r\n    }\r\n\r\n    return {\r\n      id: (await this.productsService.getProducts()).length + 1,\r\n      title: formValue['title'],\r\n      brand: formValue['brand'],\r\n      category: formValue['category'],\r\n      stock: formValue['stock'],\r\n      price: formValue['price'],\r\n      description: formValue['description'],\r\n      discountPercentage: 0,\r\n      images: [],\r\n      rating: 0,\r\n      thumbnail: '',\r\n    };\r\n  }\r\n\r\n  async apply() {\r\n    const product: IProduct = await this.convertFormValueToProduct(\r\n      this.productForm.getRawValue()\r\n    );\r\n    this.dialogRef.close(product);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}