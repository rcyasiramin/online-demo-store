{"version":3,"file":"src_app_features_login_login_module_ts.0973d385cbcf5b5c.js","mappings":"4UAqBQA,qBAMEA,gDACFA,+BACAA,qBACEA,sBAASA,kBAAQA,oBAAQA,iCAqB3BA,qBACEA,yBAAYA,kBAAQA,oBAAQA,iCAE9BA,qBAGEA,yBAAYA,kBAAQA,qBAASA,WC9CjC,MAAOC,EAIXC,YACUC,EACAC,EACAC,EACAC,EACAC,EACAC,GALAC,UACAA,mBACAA,cACAA,aACAA,aACAA,eARVA,mBAAwB,CASrB,CAEHC,WACMD,KAAKL,YAAYO,gBACnBF,KAAKJ,OAAOO,SAAS,CAAC,MAIxBH,KAAKI,UAAYJ,KAAKN,GAAGW,MAAM,CAC7BC,MAAO,CAAC,GAAI,CAACC,cAAqBA,aAClCC,SAAU,CAAC,GAAI,CAACD,iBAEpB,CAEME,QAAK,qCACTC,EAAKX,QAAQY,OACb,MAAMC,EAAaF,EAAKN,UAAUS,cAC5BP,EAAQM,EAAWN,MACnBE,EAAWI,EAAWJ,SAEtBM,EAAOC,UAAYC,GAAMA,EAAEV,QAAUA,GAE3C,IAAKQ,EAMH,OALAJ,EAAKZ,MAAMmB,kBACT,yBACA,yBAEFP,EAAKX,QAAQmB,OAIf,GAAIJ,EAAKN,WAAaA,EAKpB,OAJAE,EAAKN,UAAUe,IAAI,YAAaC,UAAU,CACxCC,mBAAmB,SAErBX,EAAKX,QAAQmB,OAIf,MAAMI,EAAYZ,EAAKb,MAAM0B,SAASC,cAAcL,IAAI,cAClDT,EAAKf,YAAYc,MAAMK,GAC7B,IAAIW,EAAkBH,GAAa,IAC/BA,GAAWI,SAAS,UAA0B,UAAdZ,EAAKa,OACvCF,EAAkB,IAClBf,EAAKZ,MAAM8B,oBACT,+BACA,iCAIJlB,EAAKd,OAAOO,SAAS,CAACsB,IACtBf,EAAKX,QAAQmB,MAAO,EArCX,EAsCX,EA/DW1B,EAAc,oCAAdA,GAAcqC,yEAAdrC,EAAc,sBAAdA,EAAcsC,sqBDX3BvC,kBAAuD,UAAvDA,CAAuD,WAGjDA,iBAMAA,gBAAMA,sBAAUA,UAGlBA,iBAAoB,qBAApBA,CAAoB,eAELA,oBAAQA,QACnBA,oBAMAA,8BAQAA,8BAGFA,QAEAA,2BAAgB,gBACHA,qBAAQA,QACnBA,oBAMAA,qBAGEA,iEAEAA,qBACEA,UACFA,UAEFA,8BAGAA,8BAKFA,UAGFA,mBAA4B,gBAIxBA,gCAASwC,SAAO,GAGhBxC,oBACFA,QACAA,iBAAmCA,8CAAgCA,QACnEA,cAAIA,iCAAmBA,qBAxEvBA,+BAsBKA,mHAOSA,qEAQVA,wDAWEA,qEAGQA,wEAITA,iFAYHA,uuCE/DR,MAAMyC,EAAiB,CAAC,CAAEC,KAAM,GAAIC,UAAW1C,IAMzC,MAAO2C,KAAkB,oCAAlBA,EAAkB,EAAlBA,EAAkB,sBAAlBA,MAAkB,0BAHnBC,cAAsBJ,GACtBI,sBCEN,MAAOC,KAAW,oCAAXA,EAAW,EAAXA,EAAW,sBAAXA,MAAW,0BAFZC,IAAcH","names":["i0","LoginComponent","constructor","fb","authService","router","route","alert","spinner","this","ngOnInit","hasLoggedUser","navigate","loginForm","group","email","Validators","password","login","_this","show","formValues","getRawValue","user","USERS","u","createErrorDialog","hide","get","setErrors","incorrectPassword","fromRoute","snapshot","queryParamMap","navigationRoute","includes","role","createWarningDialog","core","selectors","ctx","routes","path","component","LoginRoutingModule","RouterModule","LoginModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/features/login/login.component.html","./src/app/features/login/login.component.ts","./src/app/features/login/login-routing.module.ts","./src/app/features/login/login.module.ts"],"sourcesContent":["<form [formGroup]=\"loginForm\" class=\"form\" role=\"form\">\r\n  <div class=\"login-container\">\r\n    <div class=\"logo\" routerLink=\"/\" title=\"Back to Store\">\r\n      <img\r\n        loading=\"lazy\"\r\n        src=\"assets/images/shopping-cart-logo.png\"\r\n        width=\"60\"\r\n        height=\"60\"\r\n      />\r\n      <span>Demo Store</span>\r\n    </div>\r\n\r\n    <div class=\"fields\">\r\n      <mat-form-field id=\"email-field\">\r\n        <mat-label>My Email</mat-label>\r\n        <input\r\n          type=\"email\"\r\n          matInput\r\n          formControlName=\"email\"\r\n          placeholder=\"Enter your email\"\r\n        />\r\n        <mat-error\r\n          *ngIf=\"\r\n            loginForm.get('email')!.hasError('email') &&\r\n            !loginForm.get('email')!.hasError('required')\r\n          \"\r\n        >\r\n          Please enter a valid email address\r\n        </mat-error>\r\n        <mat-error *ngIf=\"loginForm.get('email')!.hasError('required')\">\r\n          Email is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field>\r\n        <mat-label>Password</mat-label>\r\n        <input\r\n          [type]=\"!showPassword ? 'password' : 'text'\"\r\n          matInput\r\n          formControlName=\"password\"\r\n          placeholder=\"Enter your password\"\r\n        />\r\n        <button\r\n          matSuffix\r\n          mat-icon-button\r\n          (click)=\"showPassword = !showPassword\"\r\n        >\r\n          <mat-icon>\r\n            {{ !showPassword ? \"visibility\" : \"visibility_off\" }}\r\n          </mat-icon>\r\n        </button>\r\n        <mat-error *ngIf=\"loginForm.get('password')!.hasError('required')\">\r\n          Password is <strong>required</strong>\r\n        </mat-error>\r\n        <mat-error\r\n          *ngIf=\"loginForm.get('password')!.hasError('incorrectPassword')\"\r\n        >\r\n          Password is <strong>incorrect</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div class=\"action-buttons\">\r\n      <button\r\n        mat-flat-button\r\n        color=\"primary\"\r\n        (click)=\"login()\"\r\n        [disabled]=\"loginForm.invalid\"\r\n      >\r\n        Login\r\n      </button>\r\n      <a routerLink=\"/account-creation\"> Haven't an account? Create now! </a>\r\n      <a> Forgot my password </a>\r\n    </div>\r\n  </div>\r\n</form>\r\n","import { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertService, AuthService } from 'src/app/core/services';\r\nimport { LoadingSpinnerService } from 'src/app/core/services/spinner/loading-spinner.service';\r\nimport { USERS } from 'src/app/shared/constants';\r\n\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  loginForm!: FormGroup;\r\n  showPassword: boolean = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private alert: AlertService,\r\n    private spinner: LoadingSpinnerService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    if (this.authService.hasLoggedUser()) {\r\n      this.router.navigate(['/']);\r\n      return;\r\n    }\r\n\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  async login() {\r\n    this.spinner.show();\r\n    const formValues = this.loginForm.getRawValue();\r\n    const email = formValues['email'];\r\n    const password = formValues['password'];\r\n\r\n    const user = USERS.find((u) => u.email === email);\r\n\r\n    if (!user) {\r\n      this.alert.createErrorDialog(\r\n        'Account does not exist',\r\n        'Check your email'\r\n      );\r\n      this.spinner.hide();\r\n      return;\r\n    }\r\n\r\n    if (user.password !== password) {\r\n      this.loginForm.get('password')!.setErrors({\r\n        incorrectPassword: true,\r\n      });\r\n      this.spinner.hide();\r\n      return;\r\n    }\r\n\r\n    const fromRoute = this.route.snapshot.queryParamMap.get('from');\r\n    await this.authService.login(user);\r\n    let navigationRoute = fromRoute ?? '/';\r\n    if (fromRoute?.includes('admin') && user.role !== 'admin') {\r\n      navigationRoute = '/';\r\n      this.alert.createWarningDialog(\r\n        'You are not an administrator',\r\n        'You cannot access this page!'\r\n      );\r\n    }\r\n\r\n    this.router.navigate([navigationRoute]);\r\n    this.spinner.hide();\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login.component';\r\n\r\nconst routes: Routes = [{ path: '', component: LoginComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class LoginRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { LoginRoutingModule } from './login-routing.module';\r\nimport { LoginComponent } from './login.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [SharedModule, LoginRoutingModule],\r\n})\r\nexport class LoginModule {}\r\n"],"x_google_ignoreList":[]}