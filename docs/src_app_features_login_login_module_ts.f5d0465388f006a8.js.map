{"version":3,"file":"src_app_features_login_login_module_ts.f5d0465388f006a8.js","mappings":"4UAqBQA,qBAMEA,gDACFA,+BACAA,qBACEA,sBAASA,kBAAQA,oBAAQA,iCAsB3BA,qBACEA,yBAAYA,kBAAQA,oBAAQA,iCAE9BA,qBAGEA,yBAAYA,kBAAQA,qBAASA,WC/CjC,MAAOC,EAIXC,YACUC,EACAC,EACAC,EACAC,EACAC,EACAC,GALAC,UACAA,mBACAA,cACAA,aACAA,aACAA,eARVA,mBAAwB,CASrB,CAEHC,WACMD,KAAKL,YAAYO,gBACnBF,KAAKJ,OAAOO,SAAS,CAAC,MAIxBH,KAAKI,UAAYJ,KAAKN,GAAGW,MAAM,CAC7BC,MAAO,CAAC,GAAI,CAACC,cAAqBA,aAClCC,SAAU,CAAC,GAAI,CAACD,iBAEpB,CAEME,QAAK,qCACTC,EAAKX,QAAQY,OACb,MAAMC,EAAaF,EAAKN,UAAUS,cAC5BP,EAAQM,EAAWN,MACnBE,EAAWI,EAAWJ,SAEtBM,EAAOC,UAAYC,GAAMA,EAAEV,QAAUA,GAE3C,IAAKQ,EAMH,OALAJ,EAAKZ,MAAMmB,kBACT,yBACA,yBAEFP,EAAKX,QAAQmB,OAIf,GAAIJ,EAAKN,WAAaA,EAKpB,OAJAE,EAAKN,UAAUe,IAAI,YAAaC,UAAU,CACxCC,mBAAmB,SAErBX,EAAKX,QAAQmB,OAIf,MAAMI,EAAYZ,EAAKb,MAAM0B,SAASC,cAAcL,IAAI,cAClDT,EAAKf,YAAYc,MAAMK,GAC7B,IAAIW,EAAkBH,GAAa,IAC/BA,GAAWI,SAAS,UAA0B,UAAdZ,EAAKa,OACvCF,EAAkB,IAClBf,EAAKZ,MAAM8B,oBACT,+BACA,iCAIJlB,EAAKd,OAAOO,SAAS,CAACsB,IACtBf,EAAKX,QAAQmB,MAAO,EArCX,EAsCX,EA/DW1B,EAAc,oCAAdA,GAAcqC,yEAAdrC,EAAc,sBAAdA,EAAcsC,stBDX3BvC,kBAAuD,UAAvDA,CAAuD,WAGjDA,iBAMAA,gBAAMA,sBAAUA,UAGlBA,iBAAoB,qBAApBA,CAAoB,eAELA,iBAAKA,QAChBA,oBAMAA,8BAQAA,8BAGFA,QAEAA,6BAAoC,gBACvBA,qBAAQA,QACnBA,oBAOAA,sBAGEA,iEAEAA,qBACEA,UACFA,UAEFA,8BAGAA,8BAKFA,UAGFA,mBAA4B,gBAIxBA,gCAASwC,SAAO,GAGhBxC,oBACFA,QACAA,iBAAmCA,8CAAgCA,QACnEA,cAAIA,iCAAmBA,qBAzEvBA,+BAsBKA,mHAOSA,qEAQVA,wDAYEA,qEAGQA,wEAITA,iFAYHA,4uCEhER,MAAMyC,EAAiB,CAAC,CAAEC,KAAM,GAAIC,UAAW1C,IAMzC,MAAO2C,KAAkB,oCAAlBA,EAAkB,EAAlBA,EAAkB,sBAAlBA,MAAkB,0BAHnBC,cAAsBJ,GACtBI,sBCEN,MAAOC,KAAW,oCAAXA,EAAW,EAAXA,EAAW,sBAAXA,MAAW,0BAFZC,IAAcH","names":["i0","LoginComponent","constructor","fb","authService","router","route","alert","spinner","this","ngOnInit","hasLoggedUser","navigate","loginForm","group","email","Validators","password","login","_this","show","formValues","getRawValue","user","USERS","u","createErrorDialog","hide","get","setErrors","incorrectPassword","fromRoute","snapshot","queryParamMap","navigationRoute","includes","role","createWarningDialog","core","selectors","ctx","routes","path","component","LoginRoutingModule","RouterModule","LoginModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./src/app/features/login/login.component.html","./src/app/features/login/login.component.ts","./src/app/features/login/login-routing.module.ts","./src/app/features/login/login.module.ts"],"sourcesContent":["<form [formGroup]=\"loginForm\" class=\"form\" role=\"form\">\n  <div class=\"login-container\">\n    <div class=\"logo\" routerLink=\"/\" title=\"Back to Store\">\n      <img\n        loading=\"lazy\"\n        src=\"assets/images/shopping-cart-logo.png\"\n        width=\"60\"\n        height=\"60\"\n      />\n      <span>Demo Store</span>\n    </div>\n\n    <div class=\"fields\">\n      <mat-form-field id=\"email-field\">\n        <mat-label>Email</mat-label>\n        <input\n          type=\"email\"\n          matInput\n          formControlName=\"email\"\n          placeholder=\"Please Enter your email\"\n        />\n        <mat-error\n          *ngIf=\"\n            loginForm.get('email')!.hasError('email') &&\n            !loginForm.get('email')!.hasError('required')\n          \"\n        >\n          Please enter a valid email address\n        </mat-error>\n        <mat-error *ngIf=\"loginForm.get('email')!.hasError('required')\">\n          Email is <strong>required</strong>\n        </mat-error>\n      </mat-form-field>\n\n      <mat-form-field id=\"password-field\">\n        <mat-label>Password</mat-label>\n        <input\n          [type]=\"!showPassword ? 'password' : 'text'\"\n          matInput\n          formControlName=\"password\"\n          placeholder=\"Enter your password\"\n          maxlength=\"20\"\n        />\n        <button\n          matSuffix\n          mat-icon-button\n          (click)=\"showPassword = !showPassword\"\n        >\n          <mat-icon>\n            {{ !showPassword ? \"visibility\" : \"visibility_off\" }}\n          </mat-icon>\n        </button>\n        <mat-error *ngIf=\"loginForm.get('password')!.hasError('required')\">\n          Password is <strong>required</strong>\n        </mat-error>\n        <mat-error\n          *ngIf=\"loginForm.get('password')!.hasError('incorrectPassword')\"\n        >\n          Password is <strong>incorrect</strong>\n        </mat-error>\n      </mat-form-field>\n    </div>\n\n    <div class=\"action-buttons\">\n      <button\n        mat-flat-button\n        color=\"primary\"\n        (click)=\"login()\"\n        [disabled]=\"loginForm.invalid\"\n      >\n        Login\n      </button>\n      <a routerLink=\"/account-creation\"> Haven't an account? Create now! </a>\n      <a> Forgot my password </a>\n    </div>\n  </div>\n</form>\n","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AlertService, AuthService } from 'src/app/core/services';\nimport { LoadingSpinnerService } from 'src/app/core/services/spinner/loading-spinner.service';\nimport { USERS } from 'src/app/shared/constants';\n\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  loginForm!: FormGroup;\n  showPassword: boolean = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private alert: AlertService,\n    private spinner: LoadingSpinnerService\n  ) {}\n\n  ngOnInit() {\n    if (this.authService.hasLoggedUser()) {\n      this.router.navigate(['/']);\n      return;\n    }\n\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  async login() {\n    this.spinner.show();\n    const formValues = this.loginForm.getRawValue();\n    const email = formValues['email'];\n    const password = formValues['password'];\n\n    const user = USERS.find((u) => u.email === email);\n\n    if (!user) {\n      this.alert.createErrorDialog(\n        'Account does not exist',\n        'Check your email'\n      );\n      this.spinner.hide();\n      return;\n    }\n\n    if (user.password !== password) {\n      this.loginForm.get('password')!.setErrors({\n        incorrectPassword: true,\n      });\n      this.spinner.hide();\n      return;\n    }\n\n    const fromRoute = this.route.snapshot.queryParamMap.get('from');\n    await this.authService.login(user);\n    let navigationRoute = fromRoute ?? '/';\n    if (fromRoute?.includes('admin') && user.role !== 'admin') {\n      navigationRoute = '/';\n      this.alert.createWarningDialog(\n        'You are not an administrator',\n        'You cannot access this page!'\n      );\n    }\n\n    this.router.navigate([navigationRoute]);\n    this.spinner.hide();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [{ path: '', component: LoginComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginRoutingModule {}\n","import { NgModule } from '@angular/core';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { LoginComponent } from './login.component';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [SharedModule, LoginRoutingModule],\n})\nexport class LoginModule {}\n"],"x_google_ignoreList":[]}