{"version":3,"file":"src_app_features_account_pages_user-area_user-area_module_ts.fa69154955f35696.js","mappings":"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","names":["i0","UserAreaComponent","constructor","dialog","fb","authService","spinner","this","ngOnInit","user","getUser","userInterface","addresses","personalInfoForm","group","name","firstName","Validators","lastName","email","phone","newsLetter","addressesForm","array","forEach","address","addressesData","push","setAddress","controls","splittedAddress","split","street","complement","neighborhood","length","zipCode","postalCode","trim","city","state","updateUserInfo","show","formValue","getRawValue","updateUserData","markAsPristine","hide","updateAddresses","onEditAddress","editedAddress","index","addNewAddress","open","AddressDialogComponent","width","afterClosed","subscribe","result","newAddress","core","selectors","ctx","routes","path","component","UserAreaRoutingModule","RouterModule","UserAreaModule","provideNgxMask","imports","SharedModule","AccountModule"],"sourceRoot":"webpack:///","sources":["./src/app/features/account/pages/user-area/user-area.component.html","./src/app/features/account/pages/user-area/user-area.component.ts","./src/app/features/account/pages/user-area/user-area-routing.module.ts","./src/app/features/account/pages/user-area/user-area.module.ts"],"sourcesContent":["<div class=\"user-container\">\r\n  <form\r\n    [formGroup]=\"personalInfoForm\"\r\n    role=\"form\"\r\n    (ngSubmit)=\"updateUserInfo()\"\r\n  >\r\n    <div class=\"user-data-container mat-elevation-z5\">\r\n      <h1>Personal Information</h1>\r\n\r\n      <div class=\"row\">\r\n        <mat-form-field id=\"name-field\">\r\n          <mat-label>Name</mat-label>\r\n          <input\r\n            type=\"text\"\r\n            matInput\r\n            formControlName=\"name\"\r\n            placeholder=\"Enter your name\"\r\n          />\r\n          <mat-error *ngIf=\"personalInfoForm.get('name')!.hasError('required')\">\r\n            Name is <strong>required</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field id=\"lastname-field\">\r\n          <mat-label>Last Name</mat-label>\r\n          <input\r\n            type=\"text\"\r\n            matInput\r\n            formControlName=\"lastName\"\r\n            placeholder=\"Enter your last name\"\r\n          />\r\n          <mat-error\r\n            *ngIf=\"personalInfoForm.get('lastName')!.hasError('required')\"\r\n          >\r\n            Last name is <strong>required</strong>\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <mat-form-field id=\"email-field\">\r\n        <mat-label>Email</mat-label>\r\n        <input\r\n          type=\"email\"\r\n          matInput\r\n          formControlName=\"email\"\r\n          placeholder=\"Enter your email\"\r\n        />\r\n        <mat-error\r\n          *ngIf=\"\r\n            personalInfoForm.get('email')!.hasError('email') &&\r\n            !personalInfoForm.get('email')!.hasError('required')\r\n          \"\r\n        >\r\n          Please enter a valid email address\r\n        </mat-error>\r\n        <mat-error *ngIf=\"personalInfoForm.get('email')!.hasError('required')\">\r\n          Email is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-form-field id=\"phone-field\">\r\n        <mat-label>Phone</mat-label>\r\n        <span matTextPrefix>+55</span>\r\n        <input\r\n          type=\"tel\"\r\n          matInput\r\n          formControlName=\"phone\"\r\n          placeholder=\"Enter your phone\"\r\n          mask=\"(00) 00000-0000||(00) 0000-0000\"\r\n        />\r\n        <mat-error *ngIf=\"personalInfoForm.get('phone')!.hasError('required')\">\r\n          Phone is <strong>required</strong>\r\n        </mat-error>\r\n      </mat-form-field>\r\n\r\n      <mat-checkbox formControlName=\"newsLetter\" color=\"primary\">\r\n        I want to receive a newsletter into my email\r\n      </mat-checkbox>\r\n\r\n      <div class=\"submit-button\">\r\n        <button\r\n          mat-flat-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"personalInfoForm.invalid || !personalInfoForm.dirty\"\r\n        >\r\n          Update my info\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <form [formGroup]=\"addressesForm\" role=\"form\">\r\n    <div class=\"user-addresses mat-elevation-z5\">\r\n      <div class=\"title\">\r\n        <h1>Addresses</h1>\r\n        <button mat-mini-fab color=\"primary\" (click)=\"addNewAddress()\">\r\n          <mat-icon>add</mat-icon>\r\n        </button>\r\n      </div>\r\n      <div class=\"address-list\">\r\n        <address-tile\r\n          *ngFor=\"let address of addressesData.controls; let i = index\"\r\n          [addressData]=\"address\"\r\n          (onEditAddress)=\"onEditAddress($event, i)\"\r\n        ></address-tile>\r\n      </div>\r\n    </div>\r\n  </form>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AuthService } from 'src/app/core/services';\r\nimport { LoadingSpinnerService } from 'src/app/core/services/spinner/loading-spinner.service';\r\nimport { IUser, IUserAddress } from 'src/app/shared/models';\r\nimport { AddressDialogComponent } from '../../components/address-dialog/address-dialog.component';\r\n\r\n@Component({\r\n  templateUrl: './user-area.component.html',\r\n  styleUrls: ['./user-area.component.scss'],\r\n})\r\nexport class UserAreaComponent {\r\n  personalInfoForm!: FormGroup;\r\n  addressesForm!: FormGroup;\r\n  user!: IUser;\r\n  addresses: IUserAddress[] = [];\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private spinner: LoadingSpinnerService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.user = this.authService.getUser()!.userInterface;\r\n    this.addresses = this.authService.getUser()!.addresses;\r\n\r\n    this.personalInfoForm = this.fb.group({\r\n      name: [this.user.firstName, [Validators.required]],\r\n      lastName: [this.user.lastName, [Validators.required]],\r\n      email: [this.user.email, [Validators.required, Validators.email]],\r\n      phone: [this.user.phone, [Validators.required]],\r\n      newsLetter: [false],\r\n    });\r\n\r\n    this.addressesForm = this.fb.group({\r\n      addresses: this.fb.array([]),\r\n    });\r\n\r\n    (this.addresses ?? []).forEach((address) => {\r\n      this.addressesData.push(this.setAddress(address));\r\n    });\r\n  }\r\n\r\n  get addressesData() {\r\n    return <FormArray<FormGroup>>this.addressesForm.controls['addresses'];\r\n  }\r\n\r\n  setAddress(address: IUserAddress): FormGroup {\r\n    const splittedAddress: string[] = address.address.split(' - ');\r\n    const street: string = splittedAddress[0];\r\n    const complement: string = splittedAddress[1] ?? '';\r\n    const neighborhood: string =\r\n      splittedAddress[splittedAddress.length - 1] ?? '';\r\n\r\n    return this.fb.group({\r\n      zipCode: [address.postalCode.trim(), [Validators.required]],\r\n      street: [street.trim(), [Validators.required]],\r\n      complement: [complement.trim()],\r\n      neighborhood: [neighborhood.trim(), [Validators.required]],\r\n      city: [address.city.trim(), [Validators.required]],\r\n      state: [address.state.trim(), [Validators.required]],\r\n    });\r\n  }\r\n\r\n  updateUserInfo() {\r\n    this.spinner.show();\r\n    const formValue = this.personalInfoForm.getRawValue();\r\n    const user: IUser = {\r\n      ...this.user,\r\n      firstName: formValue['name'],\r\n      lastName: formValue['lastName'],\r\n      email: formValue['email'],\r\n      phone: formValue['phone'],\r\n    };\r\n    this.authService.updateUserData(user);\r\n    this.personalInfoForm.markAsPristine();\r\n    this.spinner.hide();\r\n  }\r\n\r\n  updateAddresses() {\r\n    this.authService.updateAddresses(this.addresses);\r\n  }\r\n\r\n  onEditAddress(editedAddress: IUserAddress, index: number) {\r\n    this.addressesData.controls[index] = this.setAddress(editedAddress);\r\n    this.addresses.push(editedAddress);\r\n    this.updateAddresses();\r\n  }\r\n\r\n  addNewAddress() {\r\n    const dialogRef = this.dialog.open(AddressDialogComponent, {\r\n      width: '50%',\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        const newAddress: IUserAddress = {\r\n          city: result.city,\r\n          postalCode: result.zipCode,\r\n          state: result.state,\r\n          address: `${result.street} - ${result.complement} - ${result.neighborhood}`,\r\n        };\r\n        this.addressesData.controls.push(this.setAddress(newAddress));\r\n        this.addresses.push(newAddress);\r\n        this.updateAddresses();\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserAreaComponent } from './user-area.component';\r\n\r\nconst routes: Routes = [{ path: '', component: UserAreaComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UserAreaRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\n\r\nimport { UserAreaRoutingModule } from './user-area-routing.module';\r\nimport { UserAreaComponent } from './user-area.component';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { NgxMaskDirective, NgxMaskPipe, provideNgxMask } from 'ngx-mask';\r\nimport { AccountModule } from '../../account.module';\r\n\r\n@NgModule({\r\n  declarations: [UserAreaComponent],\r\n  imports: [\r\n    SharedModule,\r\n    UserAreaRoutingModule,\r\n    AccountModule,\r\n  ],\r\n  providers: [provideNgxMask()],\r\n})\r\nexport class UserAreaModule {}\r\n"],"x_google_ignoreList":[]}